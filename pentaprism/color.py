# Algorithm transcribed from
# https://github.com/Beep6581/RawTherapee/blob/dev/rtengine/colortemp.cc
# which is Copyright (c) 2004-2010 Gabor Horvath <hgabor@rawtherapee.com>

import math

TEMP_LIM = (1500., 60000.)
CENTER_TEMP = 4750.0
GREEN_LIM = (0.02, 10.)
EQUAL_LIM = (0.8, 1.5)

BLACKBODY = 4000.0

# 350nm to 830nm   5 nm J.Desmis 2degree Standard Observer.
CIE_COLOR_JD = (
    (0., 0., 0.), (0., 0., 0.),
    (0.0001299, 0.0003917, 0.0006061), (0.0002321, 0.000006965, 0.001086),
    (0.0004149, 0.00001239, 0.001946), (0.0007416, 0.00002202, 0.003846),
    (0.001368, 0.000039, 0.006450001), (0.002236, 0.000064, 0.01054999),
    (0.004243, 0.00012, 0.02005001), (0.00765, 0.000217, 0.03621),
    (0.01431, 0.000396, 0.06785001), (0.02319, 0.00064, 0.1102),
    (0.04351, 0.00121, 0.2074), (0.07763, 0.00218, 0.3713),
    (0.13438, 0.004, 0.6456), (0.21477, 0.0073, 1.0390501),
    (0.2839, 0.0116, 1.3856), (0.3285, 0.01684, 1.62296),
    (0.34828, 0.023, 1.74706), (0.34806, 0.0298, 1.7826),
    (0.3362, 0.038, 1.77211), (0.3187, 0.048, 1.7441),
    (0.2908, 0.06, 1.6692), (0.2511, 0.0739, 1.5281),
    (0.19536, 0.09098, 1.28764), (0.1421, 0.1126, 1.0419),
    (0.09564, 0.13902, 0.8129501), (0.05795001, 0.1693, 0.6162),
    (0.03201, 0.20802, 0.46518), (0.0147, 0.2586, 0.3533),
    (0.0049, 0.323, 0.272), (0.0024, 0.4073, 0.2123),
    (0.0093, 0.503, 0.1582), (0.0291, 0.6082, 0.1117),
    (0.06327, 0.71, 0.07824999), (0.1096, 0.7932, 0.05725001),
    (0.1655, 0.862, 0.04216), (0.2257499, 0.9148501, 0.02984),
    (0.2904, 0.954, 0.0203), (0.3597, 0.9803, 0.0134),
    (0.4334499, 0.9949501, 0.008749999), (0.5120501, 1., 0.005749999),
    (0.5945, 0.995, 0.0039), (0.6784, 0.9786, 0.002749999),
    (0.7621, 0.952, 0.0021), (0.8425, 0.9154, 0.0018),
    (0.9163, 0.87, 0.001650001), (0.9786, 0.8163, 0.0014),
    (1.0263, 0.757, 0.0011), (1.0567, 0.6949, 0.001),
    (1.0622, 0.631, 0.0008), (1.0456, 0.5668, 0.0006),
    (1.0026, 0.503, 0.00034), (0.9384, 0.4412, 0.00024),
    (0.8544499, 0.381, 0.00019), (0.7514, 0.321, 0.0001),
    (0.6424, 0.265, 0.00004999999), (0.5419, 0.217, 0.00003),
    (0.4479, 0.175, 0.00002), (0.3608, 0.1382, 0.00001),
    (0.2835, 0.107, 0.), (0.2187, 0.0816, 0.),
    (0.1649, 0.061, 0.), (0.1212, 0.04458, 0.),
    (0.0874, 0.032, 0.), (0.0636, 0.0232, 0.),
    (0.04677, 0.017, 0.), (0.0329, 0.01192, 0.),
    (0.0227, 0.00821, 0.), (0.01584, 0.005723, 0.),
    (0.01135916, 0.004102, 0.), (0.008110916, 0.002929, 0.),
    (0.005790346, 0.002091, 0.), (0.004109457, 0.001484, 0.),
    (0.002899327, 0.001047, 0.), (0.00204919, 0.00074, 0.),
    (0.001439971, 0.00052, 0.), (0.0009999493, 0.0003611, 0.),
    (0.0006900786, 0.0002492, 0.), (0.0004760213, 0.0001719, 0.),
    (0.0003323011, 0.00012, 0.), (0.0002348261, 0.0000848, 0.),
    (0.0001661505, 0.00006, 0.), (0.000117413, 0.0000424, 0.),
    (0.00008307527, 0.00003, 0.), (0.00005870652, 0.0000212, 0.),
    (0.00004150994, 0.00001499, 0.), (0.00002935326, 0.0000106, 0.),
    (0.00002067383, 0.0000074657, 0.), (0.00001455977, 0.0000052578, 0.),
    (0.00001025398, 0.0000037029, 0.), (0.000007221456, 0.00000260778, 0.),
    (0.000005085868, 0.0000018366, 0.), (0.000003581652, 0.0000012934, 0.),
    (0.000002522525, 0.00000091093, 0.), (0.000001776509, 0.00000064153, 0.),
    (0.000001251141, 0.00000045181, 0.)
)
S0 = (61.80, 61.65, 61.50, 65.15, 68.80, 66.10, 63.40, 64.60, 65.80, 80.30,
      94.80, 99.80, 104.80, 105.35, 105.90, 101.35, 96.80, 105.35, 113.90,
      119.75, 125.60, 125.55, 125.50, 123.40, 121.30, 121.30, 121.30, 117.40,
      113.50, 113.30, 113.10, 111.95, 110.80, 108.65, 106.50, 107.65, 108.80,
      107.05, 105.30, 104.85, 104.40, 102.20, 100.00, 98.00, 96.00, 95.55,
      95.10, 92.10, 89.10, 89.80, 90.50, 90.40, 90.30, 89.35, 88.40, 86.20,
      84.00, 84.55, 85.10, 83.50, 81.90, 82.25, 82.60, 83.75, 84.90, 83.10,
      81.30, 76.60, 71.90, 73.10, 74.30, 75.35, 76.40, 69.85, 63.30, 67.50,
      71.70, 74.35, 77.00, 71.10, 65.20, 56.45, 47.70, 58.15, 68.60, 66.80,
      65.00, 65.50, 66.00, 63.50, 61.00, 57.15, 53.30, 56.10, 58.90, 60.40,
      61.90)

S1 = (41.60, 39.80, 38.00, 40.70, 43.40, 40.95, 38.50, 36.75, 35.00, 39.20,
      43.40, 44.85, 46.30, 45.10, 43.90, 40.50, 37.10, 36.90, 36.70, 36.30,
      35.90, 34.25, 32.60, 30.25, 27.90, 26.10, 24.30, 22.20, 20.10, 18.15,
      16.20, 14.70, 13.20, 10.90, 8.60, 7.35, 6.10, 5.15, 4.20, 3.05, 1.90,
      0.95, 0.00, -0.80, -1.60, -2.55, -3.50, -3.50, -3.50, -4.65, -5.80,
      -6.50, -7.20, -7.90, -8.60, -9.05, -9.50, -10.20, -10.90, -10.80, -10.70,
      -11.35, -12.00, -13.00, -14.00, -13.80, -13.60, -12.80, -12.00, -12.65,
      -13.30, -13.10, -12.90, -11.75, -10.60, -11.10, -11.60, -11.90, -12.20,
      -11.20, -10.20, -9.00, -7.80, -9.50, -11.20, -10.80, -10.50, -10.60,
      -10.15, -9.70, -9.00, -8.30, -8.80, -9.30, -9.55, -9.80, 0.0)

S2 = (6.70, 6.00, 5.30, 5.70, 6.10, 4.55, 3.00, 2.10, 1.20, 0.05, -1.10, -0.80,
      -0.50, -0.60, -0.70, -0.95, -1.20, -1.90, -2.60, -2.75, -2.90, -2.85,
      -2.80, -2.70, -2.60, -2.60, -2.60, -2.20, -1.80, -1.65, -1.50, -1.40,
      -1.30, -1.25, -1.20, -1.10, -1.00, -0.75, -0.50, -0.40, -0.30, -0.15,
      0.00, 0.10, 0.20, 0.35, 0.50, 1.30, 2.10, 2.65, 3.65, 4.10, 4.40, 4.70,
      4.90, 5.10, 5.90, 6.70, 7.00, 7.30, 7.95, 8.60, 9.20, 9.80, 10.00, 10.20,
      9.25, 8.30, 8.95, 9.60, 9.05, 8.50, 7.75, 7.00, 7.30, 7.60, 7.80, 8.00,
      7.35, 6.70, 5.95, 5.20, 6.30, 7.40, 7.10, 6.80, 6.90, 7.00, 6.70, 6.40,
      5.95, 5.50, 5.80, 6.10, 6.30, 6.50, 0.0)

sRGBd65_xyz = (
    (3.2404542, -1.5371385, -0.4985314),
    (-0.9692660,  1.8760108,  0.0415560),
    (0.0556434, -0.2040259,  1.0572252)
)


def blackbody_spectrum(wl, temp):
    wlm = wl * 1e-9
    return ((3.7417715247e-16 / (wlm ** 5)) /
            math.expm1(1.438786e-2 / (wlm * temp)))


def daylight_spectrum(wl, m1, m2):
    wlm = int((wl - 350.0) / 5.0)
    return (S0[wlm] + m1 * S1[wlm] + m2 * S2[wlm])


def xyz_blackbody(temp):
    X, Y, Z = 0.0, 0.0, 0.0

    i = 0
    lambda_ = 350.0
    while lambda_ < 830.1:
        Me = blackbody_spectrum(lambda_, temp)
        X += Me * CIE_COLOR_JD[i][0]
        Y += Me * CIE_COLOR_JD[i][1]
        Z += Me * CIE_COLOR_JD[i][2]

        i += 1
        lambda_ += 5.0

    XYZ = X + Y + Z

    return X / XYZ, Y / XYZ, Z / XYZ


def xyz_daylight(m1, m2):
    X, Y, Z = 0.0, 0.0, 0.0

    i = 0
    lambda_ = 350.0
    while lambda_ < 830.1:
        Me = daylight_spectrum(lambda_, m1, m2)
        X += Me * CIE_COLOR_JD[i][0]
        Y += Me * CIE_COLOR_JD[i][1]
        Z += Me * CIE_COLOR_JD[i][2]

        i += 1
        lambda_ += 5.0

    XYZ = X + Y + Z

    return X / XYZ, Y / XYZ, Z / XYZ


def temp_to_xz(temp):
    if temp <= BLACKBODY:
        x, y, z = xyz_blackbody(temp)

    else:
        if temp <= 7000.0:
            x_D = -4.6070e9 / (temp ** 3) + 2.9678e6 / \
                (temp ** 2) + 0.09911e3 / temp + 0.244063
        elif temp <= 25000.0:
            x_D = -2.0064e9 / (temp ** 3) + 1.9018e6 / \
                (temp ** 2) + 0.24748e3 / temp + 0.237040
        else:
            x_D = -2.0064e9 / (temp ** 3) + 1.9018e6 / \
                (temp ** 2) + 0.24748e3 / \
                temp + 0.237040 - ((temp - 25000.) / 25000.) * 0.025

        y_D = -3.0 * x_D * x_D + 2.87 * x_D - 0.275
        interm = 0.0241 + 0.2562 * x_D - 0.734 * y_D
        m1 = (-1.3515 - 1.7703 * x_D + 5.9114 * y_D) / interm
        m2 = (0.03 - 31.4424 * x_D + 30.0717 * y_D) / interm

        x, y, z = xyz_daylight(m1, m2)

    return (x / y), ((1.0 - x - y) / y)


def slider_to_temp(slider):
    temp = slider

    if slider < CENTER_TEMP:
        t_diff = (CENTER_TEMP - slider) / (CENTER_TEMP - TEMP_LIM[0])
        temp = CENTER_TEMP + (TEMP_LIM[1] - CENTER_TEMP) * t_diff

    elif slider > CENTER_TEMP:
        t_diff = (slider - CENTER_TEMP) / (TEMP_LIM[1] - CENTER_TEMP)
        temp = CENTER_TEMP - (CENTER_TEMP - TEMP_LIM[0]) * t_diff

    return temp


def wb_to_mul(temp, green, equal):
    temp = max(min(temp, TEMP_LIM[1]), TEMP_LIM[0])
    green = max(min(green, GREEN_LIM[1]), GREEN_LIM[0])
    equal = max(min(equal, EQUAL_LIM[1]), EQUAL_LIM[0])

    Xwb, Zwb = temp_to_xz(temp)

    adj = 1.0

    if equal < 0.9999 or equal > 1.0001:
        adj = (100.0 + (1000.0 - (1000.0 / equal)) / 20.0) / 100.0

    rmul = (sRGBd65_xyz[0][0] * Xwb * adj +
            sRGBd65_xyz[0][1] + sRGBd65_xyz[0][2] * Zwb / adj)
    gmul = (sRGBd65_xyz[1][0] * Xwb +
            sRGBd65_xyz[1][1] + sRGBd65_xyz[1][2] * Zwb)
    bmul = (sRGBd65_xyz[2][0] * Xwb * adj +
            sRGBd65_xyz[2][1] + sRGBd65_xyz[2][2] * Zwb / adj)

    gmul *= green

    # print rmul, gmul, bmul

    # lowest = min(rmul, gmul, bmul)
    # rmul = 1.0 / (rmul / lowest)
    # gmul = 1.0 / (gmul / lowest)
    # bmul = 1.0 / (bmul / lowest)

    # print rmul, gmul, bmul
    highest = max(rmul, gmul, bmul)

    rmul /= highest
    gmul /= highest
    bmul /= highest

    # print rmul, gmul, bmul

    return rmul, gmul / 2, bmul, gmul / 2
